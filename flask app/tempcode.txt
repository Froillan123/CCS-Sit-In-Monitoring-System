CREATE TABLE students (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    idno TEXT NOT NULL UNIQUE,
    lastname TEXT NOT NULL,
    firstname TEXT NOT NULL,
    midname TEXT,
    course_id INTEGER NOT NULL,  -- Link to department
    year_level INTEGER NOT NULL,
    email TEXT NOT NULL UNIQUE,
    username TEXT NOT NULL UNIQUE,
    password TEXT NOT NULL,
    fullname TEXT,
    FOREIGN KEY (course_id) REFERENCES department(id) ON DELETE CASCADE
);

CREATE TABLE department (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    dept_name TEXT NOT NULL UNIQUE
);

CREATE TABLE laboratories (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    lab_name TEXT NOT NULL,
    total_pcs INTEGER NOT NULL DEFAULT 50,
    current_use_pcs INTEGER NOT NULL DEFAULT 0,
    status TEXT NOT NULL DEFAULT 'Available'
);

CREATE TABLE lab_sessions (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    student_id INTEGER NOT NULL,
    lab_id INTEGER NOT NULL,
    course_id INTEGER NOT NULL,  -- For analytics (Department-based sit-in count)
    time_in DATETIME DEFAULT CURRENT_TIMESTAMP,
    time_out DATETIME,
    FOREIGN KEY (student_id) REFERENCES students(id) ON DELETE CASCADE,
    FOREIGN KEY (lab_id) REFERENCES laboratories(id) ON DELETE CASCADE,
    FOREIGN KEY (course_id) REFERENCES department(id) ON DELETE CASCADE
);

CREATE TABLE announcements (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    title TEXT NOT NULL,
    content TEXT NOT NULL,
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    posted_by INTEGER NOT NULL,
    FOREIGN KEY (posted_by) REFERENCES admin_users(id) ON DELETE CASCADE
);











CREATE TABLE students (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    idno TEXT NOT NULL UNIQUE,
    lastname TEXT NOT NULL,
    firstname TEXT NOT NULL,
    midname TEXT,
    course TEXT NOT NULL,
    year_level INTEGER NOT NULL,
    email TEXT NOT NULL UNIQUE,
    username TEXT NOT NULL UNIQUE,
    password TEXT NOT NULL,
    fullname TEXT
);

CREATE TABLE admin_users (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    admin_username TEXT NOT NULL UNIQUE,
    password TEXT NOT NULL,
    email TEXT NOT NULL UNIQUE,
    name TEXT NOT NULL,
    admin_firstname TEXT, 
    admin_lastname TEXT
);

CREATE TABLE laboratories (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    lab_name TEXT NOT NULL,
    total_pcs INTEGER NOT NULL DEFAULT 50,
    current_use_pcs INTEGER NOT NULL DEFAULT 0,
    status TEXT NOT NULL DEFAULT 'Available'
);

CREATE TABLE department (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    dept_name TEXT NOT NULL UNIQUE
);

CREATE TABLE lab_sessions (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    student_id INTEGER NOT NULL,
    lab_id INTEGER NOT NULL,
    dept_id INTEGER NOT NULL,
    time_in DATETIME DEFAULT CURRENT_TIMESTAMP,
    time_out DATETIME,
    FOREIGN KEY (student_id) REFERENCES students(id) ON DELETE CASCADE,
    FOREIGN KEY (lab_id) REFERENCES laboratories(id) ON DELETE CASCADE,
    FOREIGN KEY (dept_id) REFERENCES department(id) ON DELETE CASCADE
);

CREATE TABLE announcements (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    title TEXT NOT NULL,
    content TEXT NOT NULL,
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    posted_by INTEGER NOT NULL,
    FOREIGN KEY (posted_by) REFERENCES admin_users(id) ON DELETE CASCADE
);





socketio = SocketIO(app, cors_allowed_origins="https://css-sit-in-monitoring-system.onrender.com")


const socket = io.connect('wss://css-sit-in-monitoring-system.onrender.com/socket.io/');



def get_reservations_by_student_id(student_id):
    # Assuming you're using SQLite
    conn = sqlite3.connect('student.db')
    cursor = conn.cursor()

    query = """
    SELECT r.id, r.student_name, r.purpose, l.lab_name, r.reservation_date, r.time_in, r.time_out, r.status
    FROM reservations r
    JOIN laboratories l ON r.lab_id = l.id
    WHERE r.student_idno = ?
    """
    cursor.execute(query, (student_id,))
    reservations = cursor.fetchall()

    conn.close()
    return reservations


